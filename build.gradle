buildscript {
    repositories {
        jcenter()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RC1"
    }
}

apply plugin: "spring-boot"

version = "1.2.0"

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile).each { it.options.encoding = defaultEncoding }

springBoot {
    executable = true
}

javadoc {
    options.encoding = defaultEncoding
}

test {
    include "**/model/**", "**/controller/**", "**/util/**", "**/context/**"
}

repositories {
    jcenter()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
}

dependencies {
    compileOnly "org.projectlombok:lombok:1.16.8"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-aop"
    compile "org.springframework.boot:spring-boot-starter-cache"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.hibernate:hibernate-java8"
    compile "org.ehcache:ehcache:3.1.+"
    compile "javax.cache:cache-api:1.0.0"
    compile "com.zaxxer:HikariCP:2.4.+"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.8.+"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.+"
    compile "commons-io:commons-io:2.5"
    compile "org.apache.commons:commons-collections4:4.1"
    compile "org.apache.commons:commons-lang3:3.4"
    compile "com.ibm.icu:icu4j:57.1"
    compile fileTree(dir: 'libs', includes: ['*.jar'])
    runtime "com.h2database:h2:1.4.+"
    testCompile "org.projectlombok:lombok:1.16.8"
    testCompile "org.springframework.boot:spring-boot-starter-test"
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.14.1"
}

// 自分のプロジェクトとしてディープコピーしたい時は以下の変数を編集した後
// 「 gradlew copyProject 」を実行してください。
def yourProjectName = "sample"
def yourProjectPackage = "your.sample"
def yourProjectPath = "../${yourProjectName}"
task copyProject << {
    def projectPath = yourProjectPath
    def packagePath = yourProjectPackage.replaceAll(/\./, "/")
    def javaPath = "${projectPath}/src/main/java/${packagePath}"
    def testPath = "${projectPath}/src/test/java/${packagePath}"
    copy {
        from (".") { exclude ".*", "bin", "build", "LICENSE", "src/main/java", "src/test/java" }
        into projectPath
    }
    ant.copy(file: ".gitignore", todir: "${projectPath}")
    copy {
        from ("src/main/java/sample")
        into javaPath
    }
    copy {
        from ("src/test/java/sample")
        into testPath
    }
    ant.replace(token: "sample-boot-hibernate", value: yourProjectName) {
        fileset(dir: projectPath) {
            include(name: "README.md")
            include(name: "settings.gradle")
            include(name: "src/main/resources/application.yml")
            include(name: "src/main/resources/banner.txt")
        }
    }
    ant.replace(token: "packageToScan: sample", value: "packageToScan: ${yourProjectPackage}") {
        fileset(dir: projectPath) { include(name: "src/main/resources/application.yml") }
    }
    ant.replace(token: "logger name=\"sample\"", value: "logger name=\"${yourProjectPackage}\"") {
        fileset(dir: projectPath) { include(name: "src/main/resources/logback-spring.xml") }
    }
    ant.replace(token: "import sample", value: "import ${yourProjectPackage}") {
        fileset(dir: javaPath) { include(name: "**/*.java") }
        fileset(dir: testPath) { include(name: "**/*.java") }
    }
    ant.replace(token: "package sample", value: "package ${yourProjectPackage}") {
        fileset(dir: javaPath) { include(name: "**/*.java") }
        fileset(dir: testPath) { include(name: "**/*.java") }
    }
    
}
